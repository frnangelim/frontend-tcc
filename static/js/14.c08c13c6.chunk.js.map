{"version":3,"sources":["pages/Signup/styles.js","pages/Signup/index.js","services/RequestService.js","services/UserService.js"],"names":["CustomCard","styled","Card","CustomLabel","Label","CustomButton","Button","div","Signup","props","useState","name","email","password","newUser","setNewUser","errorMessage","setErrorMessage","history","useHistory","addToast","useToasts","onChangeInput","e","target","value","onSubmit","a","preventDefault","UserService","appearance","autoDismiss","push","err","message","style","textAlign","src","logo","alt","width","height","CardBody","Form","Row","Col","sm","FormGroup","for","Input","type","id","fullName","onChange","placeholder","required","color","require","TIMEOUT_IN_SECONDS","parseInt","process","REACT_APP_TIMEOUT_IN_SECONDS","request","data","url","params","options","headers","userToken","localStorage","getItem","Headers","Object","keys","forEach","key","undefined","searchParams","append","body","JSON","stringify","Promise","resolve","reject","timeoutId","setTimeout","Error","fetch","then","response","clearTimeout","status","ok","json","result","BASE_URL","getOne","slug","URL","method","getAuthenticatedUser","signup","update","user","FormData","profileImage","Blob","coverImage"],"mappings":"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","file":"static/js/14.c08c13c6.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { Card, Label, Button } from \"reactstrap\";\n\nexport const CustomCard = styled(Card)`\n  margin-top: 100px;\n  text-align: center;\n  background: #fff;\n  margin-left: auto;\n  margin-right: auto;\n  border: 1px solid #d9d9d9;\n  border-radius: 5px;\n  margin-bottom: 30px;\n\n  @media (min-width: 768px) {\n    padding: 50px;\n    width: 50%;\n  }\n\n  @media (max-width: 768px) {\n    padding-top: 50px;\n    padding-bottom: 50px;\n    margin-left: 10px;\n    margin-right: 10px;\n    margin-top: 150px;\n  }\n`;\n\nexport const CustomLabel = styled(Label)`\n  float: left;\n  font-weight: bold;\n`;\n\nexport const CustomButton = styled(Button)`\n  width: 300px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const BackArrowContainer = styled.div`\n  position: absolute;\n  top: 80px;\n  left: 20px;\n  cursor: pointer;\n`;\n","import React, { useState } from \"react\";\nimport { useToasts } from \"react-toast-notifications\";\nimport { CardBody, Row, Col, Form, FormGroup, Input } from \"reactstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport { ErrorSpan } from \"../../styles/General.style\";\nimport { CustomCard, CustomLabel, CustomButton } from \"./styles\";\nimport logo from \"../../assets/icons/icongaja.png\";\n\nimport * as UserService from \"../../services/UserService\";\n\nfunction Signup(props) {\n  const [newUser, setNewUser] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const history = useHistory();\n  const { addToast } = useToasts();\n\n  const onChangeInput = (e) => {\n    let name = e.target.name;\n    let value = e.target.value;\n    setNewUser({ ...newUser, [name]: value });\n  };\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      let response = await UserService.signup(newUser);\n      if (response) {\n        addToast(\"Cadastro realizado com sucesso!\", {\n          appearance: \"success\",\n          autoDismiss: true,\n        });\n        history.push(\"/entrar\");\n      }\n    } catch (error) {\n      setErrorMessage(\n        error && error.err\n          ? error.err.message\n          : \"Ocorreu um erro, tente novamente.\"\n      );\n    }\n  };\n\n  return (\n    <CustomCard>\n      <div style={{ textAlign: \"center\" }}>\n        <img src={logo} alt=\"Logo\" style={{ width: 60, height: 60 }} />\n      </div>\n      <CardBody>\n        <Form onSubmit={onSubmit}>\n          <Row>\n            <Col sm=\"12\">\n              <FormGroup>\n                <CustomLabel for=\"name\">\n                  Nome da sua organização/Nome pessoal*:\n                </CustomLabel>\n                <Input\n                  type=\"text\"\n                  name=\"fullName\"\n                  id=\"fullName\"\n                  value={newUser.fullName}\n                  onChange={onChangeInput}\n                  placeholder={\"Insira como você deseja ser reconhecido\"}\n                  required\n                />\n              </FormGroup>\n            </Col>\n            <Col sm=\"12\">\n              <FormGroup>\n                <CustomLabel for=\"email\">Email*:</CustomLabel>\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"email\"\n                  value={newUser.email}\n                  onChange={onChangeInput}\n                  placeholder={\"Digite o seu email\"}\n                  required\n                />\n              </FormGroup>\n            </Col>\n            <Col sm=\"12\">\n              <FormGroup>\n                <CustomLabel for=\"password\">Senha*:</CustomLabel>\n                <Input\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"password\"\n                  value={newUser.password}\n                  onChange={onChangeInput}\n                  placeholder={\"Digite a sua senha\"}\n                  required\n                />\n              </FormGroup>\n            </Col>\n          </Row>\n          {errorMessage && (\n            <ErrorSpan>\n              {errorMessage}\n              <br />\n            </ErrorSpan>\n          )}\n          <br />\n          <CustomButton color=\"primary\">Cadastrar</CustomButton>\n        </Form>\n      </CardBody>\n    </CustomCard>\n  );\n}\n\nexport default Signup;\n","const { history } = require(\"../history\");\n\nconst TIMEOUT_IN_SECONDS = parseInt(\n  process.env.REACT_APP_TIMEOUT_IN_SECONDS || 20\n);\n\n/**\n * Executa uma requisição para a url informada.\n *\n * @param {Object} data Opções da requisição\n */\nexport async function request(data) {\n  let { url, params, options } = data;\n\n  let headers = {};\n\n  if (!options || !options[\"Content-Type\"]) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n\n  let userToken = localStorage.getItem(\"USER_JWT\");\n\n  if (userToken) {\n    headers[\"Authorization\"] = userToken;\n  }\n\n  data.headers = new Headers(headers);\n\n  if (params) {\n    Object.keys(params).forEach((key) => {\n      if (params[key] !== undefined) {\n        url.searchParams.append(key, params[key]);\n      }\n    });\n  }\n\n  if (data.body && headers[\"Content-Type\"] === \"application/json\") {\n    data.body = JSON.stringify(data.body);\n  }\n\n  return new Promise((resolve, reject) => {\n    const timeoutId = setTimeout(() => {\n      reject(new Error(\"Promise timeout\"));\n    }, TIMEOUT_IN_SECONDS * 1000);\n\n    fetch(url, data).then((response) => {\n      clearTimeout(timeoutId);\n\n      if (response.status === 401) history.push(`/entrar`); // TODO NOT AUTHORIZED?\n\n      if (response.ok) {\n        response.json().then((result) => {\n          resolve(result);\n        });\n      } else {\n        response.json().then((result) => {\n          reject(result);\n        });\n      }\n    });\n  });\n}\n","// Serviços\nconst { request } = require(\"./RequestService\");\n\n// Constantes\nconst BASE_URL = `${process.env.REACT_APP_API_URL}/user`;\n\nexport function getOne(slug) {\n  const url = new URL(BASE_URL + `/${slug}`);\n\n  let method = \"GET\";\n\n  return request({\n    url,\n    method,\n  });\n}\n\nexport function getAuthenticatedUser() {\n  const url = new URL(BASE_URL + \"/authenticated\");\n\n  let method = \"GET\";\n\n  return request({\n    url,\n    method,\n  });\n}\n\nexport function signup(data) {\n  const url = new URL(BASE_URL);\n\n  let method = \"POST\";\n\n  return request({\n    url,\n    body: data,\n    method,\n  });\n}\n\nexport function update(user) {\n  const options = {\n    \"Content-Type\": \"multipart/form-data\",\n  };\n\n  const url = new URL(BASE_URL);\n\n  let method = \"PUT\";\n\n  let data = new FormData();\n  data.append(\"user\", JSON.stringify(user));\n  if (user.profileImage && user.profileImage instanceof Blob) {\n    data.append(\"file\", user.profileImage, \"profileImage\");\n  }\n  if (user.coverImage && user.coverImage instanceof Blob) {\n    data.append(\"file\", user.coverImage, \"coverImage\");\n  }\n\n  return request({\n    url,\n    body: data,\n    method,\n    options,\n  });\n}\n"],"sourceRoot":""}